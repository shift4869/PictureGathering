# config.ini
# (1)以下の項目について自分の環境に書き換える（主に{}内や必須と書かれている項目）
# (2)このファイル（config_example.ini）を config.ini にリネーム
# (3)PictureGathering.pyから見て ./config/config.ini に配置する

# ツイッターAPIを利用するためのトークンを記載（必須）
[twitter_token_keys]
consumer_key        = xxxxxxxxxxxxxxxxxxxxxxxxx
consumer_secret     = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
access_token        = xxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
access_token_secret = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# LINEにポストするためのトークンを記載（任意）
[line_token_keys]
token_key        = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# slackにポストするためのwebhookURLを記載（任意）
[slack_webhook_url]
webhook_url      = https://hooks.slack.com/xxx

# discordにポストするためのwebhookURLを記載（任意）
[discord_webhook_url]
webhook_url      = https://discordapp.com/api/webhooks/xxx

# DLした画像の保存先ディレクトリを絶対パスで記載（必須）
[save_directory]
save_fav_path = C:\Users\{username}\Pictures\PictureGathering\twitterFav
save_retweet_path = C:\Users\{username}\Pictures\PictureGathering\twitterRT

# 保存先ディレクトリに何枚まで画像を保持するか（必須:1以上）
[holding]
holding_file_num = 300

# DLした画像情報を保持するDBの保存先を記載
# save_path = 保存先ディレクトリの絶対パス（必須）
# save_file_name = DB保存名（必須）
# save_blob_flag = DBに画像バイナリを埋め込むかどうかのフラグ{True,False}（必須）
#                  TrueならばDBに画像バイナリをblobとして埋め込む。DBから画像を直接復元できるがサイズは大きくなる
#                  FalseならばDBに画像バイナリを埋め込まない。DBには画像リンクのみ格納され、サイズは小さくなる
# save_permanent_image_flag = 元画像を常に保存するかどうかのフラグ{True,False}（必須）
# save_permanent_image_path = 元画像を常に保存する場合の保存先ディレクトリの絶対パス（同フラグがTrueの場合必須）
#                             ※通常の保存先ディレクトリとは別の場所を指定すること
[db]
save_path = C:\Users\{username}\Documents\python\PictureGathering
save_file_name = PG_DB.db
save_blob_flag = False
save_permanent_image_flag = True
save_permanent_image_path = C:\Users\{username}\Documents\python\PictureGathering

# TLの収集範囲などを調整するパラメータ
# user_name = 対象ツイッターアカウントのスクリーンネーム（必須）
#             "@"は含めない。APIトークンと対応しているアカウントを記載する
# fav_get_max_loop = Favを遡る際のループ回数（必須:1以上、デフォルト:3）
#                    最大 count * fav_get_max_loop 前のツイートまで遡ってFavを収集する
# retweet_get_max_loop = RTを遡る際のループ回数（必須:1以上、デフォルト:3）
#                        最大 count * retweet_get_max_loop 前のツイートまで遡ってRTを収集する
# count = 1ループあたり遡るツイート数（必須:1以上200以下、デフォルト:200）
# kind_of_timeline = Fav収集タイムライン種別（必須:{favorite,home}、デフォルト:favorite）
#                    favoriteの場合、Favリストから収集する（デフォルト）
#                    homeの場合、ホームタイムラインから収集する
[tweet_timeline]
user_name = {your twitter name (exclude "@")}
fav_get_max_loop = 3
retweet_get_max_loop = 3
count = 200
kind_of_timeline = favorite

# 更新日時を画像保存時の時刻に上書きするかどうか{True,False}（必須）
[timestamp]
timestamp_created_at = True

# 処理後通知系フラグ
# is_post_fav_done_reply = Fav収集時に完了メッセージをリプライするかどうか{True,False}（必須）
# is_post_retweet_done_reply = Retweet収集時に完了メッセージをリプライするかどうか{True,False}（必須）
# reply_to_user_name = 完了メッセージ通知先のツイッターアカウントのスクリーンネーム（※任意）
#                      "@"は含めない。※上記完了メッセージリプライフラグがどちらか一つでもTrueならば必須
# is_post_line_notify = LINEに完了メッセージを通知するかどうか{True,False}（任意:対応するトークンが必要）
# is_post_slack_notify = slackに完了メッセージを通知するかどうか{True,False}（任意:対応するwebhookURLの設定が必要）
# is_post_discord_notify = discordに完了メッセージを通知するかどうか{True,False}（任意:対応するwebhookURLの設定が必要）
[notification]
is_post_fav_done_reply = True
is_post_retweet_done_reply = True
reply_to_user_name = {twitter name (exclude "@") to reply}
is_post_line_notify = False
is_post_slack_notify = False
is_post_discord_notify = False

# 画像をimage_magickで加工する場合、magick.exeへの絶対パスを記載（任意）
# -quality 60 加工を行うことで、画像容量を抑えられる
# 加工しない場合は空白でOK
# image_magick = 
[processes]
image_magick = {image_magick path (magick.exe)}
